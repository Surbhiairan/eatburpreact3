__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = require(_dependencyMap[1], "./../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/anjali/Desktop/Eatburp/eatburpreact3/app/screens/AddReview.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = require(_dependencyMap[2], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        AddReview: {
            displayName: "AddReview"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/anjali/Desktop/Eatburp/eatburpreact3/app/screens/AddReview.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var AddReview = _wrapComponent("AddReview")(function (_Component) {
        _inherits(AddReview, _Component);

        function AddReview() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, AddReview);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AddReview.__proto__ || Object.getPrototypeOf(AddReview)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                restoName: '',
                itemName: '',
                review: '',
                rating: ''
            }, _this.handleRestaurant = function (text) {
                _this.setState({
                    restoName: text
                });
            }, _this.handleFood = function (text) {
                _this.setState({
                    itemName: text
                });
            }, _this.handleReview = function (text) {
                _this.setState({
                    review: text
                });
            }, _this.handleRating = function (text) {
                _this.setState({
                    rating: text
                });
            }, _this.addReview = function (restoName, itemName, review, rating) {
                _this.onSubmitReview();
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(AddReview, [{
            key: "onSubmitReview",
            value: function onSubmitReview() {
                var data, response;
                return regeneratorRuntime.async(function onSubmitReview$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                data = {
                                    restoName: this.state.restoName,
                                    itemName: this.state.itemName,
                                    review: this.state.review,
                                    rating: this.state.rating
                                };
                                console.log(JSON.stringify(data), "data");
                                _context.prev = 2;
                                _context.next = 5;
                                return regeneratorRuntime.awrap(fetch("http://192.168.43.101:3000/addReview", {
                                    method: "POST",
                                    headers: {
                                        "Accept": "application/json",
                                        "Content-Type": "application/json"
                                    },
                                    body: JSON.stringify(data)
                                }));

                            case 5:
                                response = _context.sent;

                                if (response.status >= 200 && response.status < 300) {
                                    alert("authenticated successfully!!!");
                                }

                                _context.next = 12;
                                break;

                            case 9:
                                _context.prev = 9;
                                _context.t0 = _context["catch"](2);
                                alert(_context.t0);

                            case 12:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, null, this, [[2, 9]]);
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 66
                        }
                    },
                    _react3.default.createElement(_reactNative.TextInput, {
                        style: styles.input,
                        underlineColorAndroid: "transparent",
                        placeholder: "Restaurant Name",
                        placeholderTextColor: "#9a73ef",
                        autoCapitalize: "none",
                        onChangeText: this.handleRestaurant,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 67
                        }
                    }),
                    _react3.default.createElement(_reactNative.TextInput, {
                        style: styles.input,
                        underlineColorAndroid: "transparent",
                        placeholder: "Food Name",
                        placeholderTextColor: "#9a73ef",
                        autoCapitalize: "none",
                        onChangeText: this.handleFood,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 74
                        }
                    }),
                    _react3.default.createElement(_reactNative.TextInput, {
                        style: styles.input,
                        underlineColorAndroid: "transparent",
                        placeholder: "Review",
                        placeholderTextColor: "#9a73ef",
                        autoCapitalize: "none",
                        onChangeText: this.handleReview,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 81
                        }
                    }),
                    _react3.default.createElement(_reactNative.TextInput, {
                        style: styles.input,
                        underlineColorAndroid: "transparent",
                        placeholder: "Rating",
                        placeholderTextColor: "#9a73ef",
                        autoCapitalize: "none",
                        onChangeText: this.handleRating,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 88
                        }
                    }),
                    _react3.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: styles.submitButton,
                            onPress: function onPress() {
                                return _this2.addReview(_this2.state.itemName, _this2.state.review, _this2.state.restoName, _this2.state.rating);
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 95
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.Text,
                            {
                                style: styles.submitButtonText,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 101
                                }
                            },
                            " Submit "
                        )
                    )
                );
            }
        }]);

        return AddReview;
    }(_react2.Component));

    exports.default = AddReview;

    var styles = _reactNative.StyleSheet.create({
        container: {
            paddingTop: 23
        },
        input: {
            margin: 15,
            height: 40,
            borderColor: '#7a42f4',
            borderWidth: 1
        },
        submitButton: {
            backgroundColor: '#7a42f4',
            padding: 10,
            margin: 15,
            height: 40
        },
        submitButtonText: {
            color: 'white'
        }
    });
});