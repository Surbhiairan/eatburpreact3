__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    exports.getInputRangeFromIndexes = getInputRangeFromIndexes;
    exports.defaultScrollInterpolator = defaultScrollInterpolator;
    exports.defaultAnimatedStyles = defaultAnimatedStyles;
    exports.shiftAnimatedStyles = shiftAnimatedStyles;
    exports.stackScrollInterpolator = stackScrollInterpolator;
    exports.stackAnimatedStyles = stackAnimatedStyles;
    exports.tinderScrollInterpolator = tinderScrollInterpolator;
    exports.tinderAnimatedStyles = tinderAnimatedStyles;

    var _reactNative = require(_dependencyMap[0], "react-native");

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var IS_ANDROID = _reactNative.Platform.OS === 'android';

    function getInputRangeFromIndexes(range, index, carouselProps) {
        var sizeRef = carouselProps.vertical ? carouselProps.itemHeight : carouselProps.itemWidth;
        var inputRange = [];

        for (var i = 0; i < range.length; i++) {
            inputRange.push((index - range[i]) * sizeRef);
        }

        return inputRange;
    }

    function defaultScrollInterpolator(index, carouselProps) {
        var range = [1, 0, -1];
        var inputRange = getInputRangeFromIndexes(range, index, carouselProps);
        var outputRange = [0, 1, 0];
        return {
            inputRange: inputRange,
            outputRange: outputRange
        };
    }

    function defaultAnimatedStyles(index, animatedValue, carouselProps) {
        var animatedOpacity = {};
        var animatedScale = {};

        if (carouselProps.inactiveSlideOpacity < 1) {
            animatedOpacity = {
                opacity: animatedValue.interpolate({
                    inputRange: [0, 1],
                    outputRange: [carouselProps.inactiveSlideOpacity, 1]
                })
            };
        }

        if (carouselProps.inactiveSlideScale < 1) {
            animatedScale = {
                transform: [{
                    scale: animatedValue.interpolate({
                        inputRange: [0, 1],
                        outputRange: [carouselProps.inactiveSlideScale, 1]
                    })
                }]
            };
        }

        return _extends({}, animatedOpacity, animatedScale);
    }

    function shiftAnimatedStyles(index, animatedValue, carouselProps) {
        var animatedOpacity = {};
        var animatedScale = {};
        var animatedTranslate = {};

        if (carouselProps.inactiveSlideOpacity < 1) {
            animatedOpacity = {
                opacity: animatedValue.interpolate({
                    inputRange: [0, 1],
                    outputRange: [carouselProps.inactiveSlideOpacity, 1]
                })
            };
        }

        if (carouselProps.inactiveSlideScale < 1) {
            animatedScale = {
                scale: animatedValue.interpolate({
                    inputRange: [0, 1],
                    outputRange: [carouselProps.inactiveSlideScale, 1]
                })
            };
        }

        if (carouselProps.inactiveSlideShift !== 0) {
            var translateProp = carouselProps.vertical ? 'translateX' : 'translateY';
            animatedTranslate = _defineProperty({}, translateProp, animatedValue.interpolate({
                inputRange: [0, 1],
                outputRange: [carouselProps.inactiveSlideShift, 0]
            }));
        }

        return _extends({}, animatedOpacity, {
            transform: [_extends({}, animatedScale), _extends({}, animatedTranslate)]
        });
    }

    function stackScrollInterpolator(index, carouselProps) {
        var range = IS_ANDROID ? [1, 0, -1, -2, -3] : [3, 2, 1, 0, -1];
        var inputRange = getInputRangeFromIndexes(range, index, carouselProps);
        var outputRange = range;
        return {
            inputRange: inputRange,
            outputRange: outputRange
        };
    }

    function stackAnimatedStyles(index, animatedValue, carouselProps, cardOffset) {
        var sizeRef = carouselProps.vertical ? carouselProps.itemHeight : carouselProps.itemWidth;
        var translateProp = carouselProps.vertical ? 'translateY' : 'translateX';
        var card1Scale = 0.9;
        var card2Scale = 0.8;
        cardOffset = !cardOffset && cardOffset !== 0 ? 18 : cardOffset;

        var getTranslateFromScale = function getTranslateFromScale(index, scale) {
            var centerFactor = 1 / scale * index;
            var centeredPosition = -Math.round(sizeRef * centerFactor);
            var edgeAlignment = Math.round((sizeRef - sizeRef * scale) / 2);
            var offset = Math.round(cardOffset * Math.abs(index) / scale);
            return IS_ANDROID ? centeredPosition - edgeAlignment - offset : centeredPosition + edgeAlignment + offset;
        };

        return IS_ANDROID ? {
            zIndex: carouselProps.data.length - index,
            opacity: animatedValue.interpolate({
                inputRange: [-3, -2, -1, 0],
                outputRange: [0, 0.5, 0.75, 1],
                extrapolate: 'clamp'
            }),
            transform: [{
                scale: animatedValue.interpolate({
                    inputRange: [-2, -1, 0, 1],
                    outputRange: [card2Scale, card1Scale, 1, card1Scale],
                    extrapolate: 'clamp'
                })
            }, _defineProperty({}, translateProp, animatedValue.interpolate({
                inputRange: [-3, -2, -1, 0, 1],
                outputRange: [getTranslateFromScale(-3, card2Scale), getTranslateFromScale(-2, card2Scale), getTranslateFromScale(-1, card1Scale), 0, sizeRef * 0.5],
                extrapolate: 'clamp'
            }))]
        } : {
            zIndex: carouselProps.data.length - index,
            opacity: animatedValue.interpolate({
                inputRange: [0, 1, 2, 3],
                outputRange: [1, 0.75, 0.5, 0],
                extrapolate: 'clamp'
            }),
            transform: [{
                scale: animatedValue.interpolate({
                    inputRange: [-1, 0, 1, 2],
                    outputRange: [card1Scale, 1, card1Scale, card2Scale],
                    extrapolate: 'clamp'
                })
            }, _defineProperty({}, translateProp, animatedValue.interpolate({
                inputRange: [-1, 0, 1, 2, 3],
                outputRange: [-sizeRef * 0.5, 0, getTranslateFromScale(1, card1Scale), getTranslateFromScale(2, card2Scale), getTranslateFromScale(3, card2Scale)],
                extrapolate: 'clamp'
            }))]
        };
    }

    function tinderScrollInterpolator(index, carouselProps) {
        var range = IS_ANDROID ? [1, 0, -1, -2, -3] : [3, 2, 1, 0, -1];
        var inputRange = getInputRangeFromIndexes(range, index, carouselProps);
        var outputRange = range;
        return {
            inputRange: inputRange,
            outputRange: outputRange
        };
    }

    function tinderAnimatedStyles(index, animatedValue, carouselProps, cardOffset) {
        var sizeRef = carouselProps.vertical ? carouselProps.itemHeight : carouselProps.itemWidth;
        var mainTranslateProp = carouselProps.vertical ? 'translateY' : 'translateX';
        var secondaryTranslateProp = carouselProps.vertical ? 'translateX' : 'translateY';
        var card1Scale = 0.96;
        var card2Scale = 0.92;
        var card3Scale = 0.88;
        var peekingCardsOpacity = IS_ANDROID ? 0.92 : 1;
        cardOffset = !cardOffset && cardOffset !== 0 ? 9 : cardOffset;

        var getMainTranslateFromScale = function getMainTranslateFromScale(index, scale) {
            var centerFactor = 1 / scale * index;
            return -Math.round(sizeRef * centerFactor);
        };

        var getSecondaryTranslateFromScale = function getSecondaryTranslateFromScale(index, scale) {
            return Math.round(cardOffset * Math.abs(index) / scale);
        };

        return IS_ANDROID ? {
            zIndex: carouselProps.data.length - index,
            opacity: animatedValue.interpolate({
                inputRange: [-3, -2, -1, 0, 1],
                outputRange: [0, peekingCardsOpacity, peekingCardsOpacity, 1, 0],
                extrapolate: 'clamp'
            }),
            transform: [{
                scale: animatedValue.interpolate({
                    inputRange: [-3, -2, -1, 0],
                    outputRange: [card3Scale, card2Scale, card1Scale, 1],
                    extrapolate: 'clamp'
                })
            }, {
                rotate: animatedValue.interpolate({
                    inputRange: [0, 1],
                    outputRange: ['0deg', '22deg'],
                    extrapolate: 'clamp'
                })
            }, _defineProperty({}, mainTranslateProp, animatedValue.interpolate({
                inputRange: [-3, -2, -1, 0, 1],
                outputRange: [getMainTranslateFromScale(-3, card3Scale), getMainTranslateFromScale(-2, card2Scale), getMainTranslateFromScale(-1, card1Scale), 0, sizeRef * 1.1],
                extrapolate: 'clamp'
            })), _defineProperty({}, secondaryTranslateProp, animatedValue.interpolate({
                inputRange: [-3, -2, -1, 0],
                outputRange: [getSecondaryTranslateFromScale(-3, card3Scale), getSecondaryTranslateFromScale(-2, card2Scale), getSecondaryTranslateFromScale(-1, card1Scale), 0],
                extrapolate: 'clamp'
            }))]
        } : {
            zIndex: carouselProps.data.length - index,
            opacity: animatedValue.interpolate({
                inputRange: [-1, 0, 1, 2, 3],
                outputRange: [0, 1, peekingCardsOpacity, peekingCardsOpacity, 0],
                extrapolate: 'clamp'
            }),
            transform: [{
                scale: animatedValue.interpolate({
                    inputRange: [0, 1, 2, 3],
                    outputRange: [1, card1Scale, card2Scale, card3Scale],
                    extrapolate: 'clamp'
                })
            }, {
                rotate: animatedValue.interpolate({
                    inputRange: [-1, 0],
                    outputRange: ['-22deg', '0deg'],
                    extrapolate: 'clamp'
                })
            }, _defineProperty({}, mainTranslateProp, animatedValue.interpolate({
                inputRange: [-1, 0, 1, 2, 3],
                outputRange: [-sizeRef * 1.1, 0, getMainTranslateFromScale(1, card1Scale), getMainTranslateFromScale(2, card2Scale), getMainTranslateFromScale(3, card3Scale)],
                extrapolate: 'clamp'
            })), _defineProperty({}, secondaryTranslateProp, animatedValue.interpolate({
                inputRange: [0, 1, 2, 3],
                outputRange: [0, getSecondaryTranslateFromScale(1, card1Scale), getSecondaryTranslateFromScale(2, card2Scale), getSecondaryTranslateFromScale(3, card3Scale)],
                extrapolate: 'clamp'
            }))]
        };
    }
});