__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = require(_dependencyMap[1], "./../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/anjali/Desktop/Eatburp/eatburpreact3/app/screens/AddReview.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = require(_dependencyMap[2], "react-native");

    var _reactRedux = require(_dependencyMap[3], "react-redux");

    var _expo = require(_dependencyMap[4], "expo");

    var _restaurants = require(_dependencyMap[5], "../actions/restaurants.action");

    var _foodItems = require(_dependencyMap[6], "../actions/foodItems.action");

    var _review = require(_dependencyMap[7], "../actions/review.action");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        AddReview: {
            displayName: "AddReview"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/anjali/Desktop/Eatburp/eatburpreact3/app/screens/AddReview.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var ds = new _reactNative.ListView.DataSource({
        rowHasChanged: function rowHasChanged(r1, r2) {
            return r1 !== r2;
        }
    });

    var AddReview = _wrapComponent("AddReview")(function (_Component) {
        _inherits(AddReview, _Component);

        function AddReview() {
            var _ref,
                _this2 = this;

            var _temp, _this, _ret;

            _classCallCheck(this, AddReview);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AddReview.__proto__ || Object.getPrototypeOf(AddReview)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                restoName: '',
                itemName: '',
                review: '',
                rating: '',
                image: null,
                restaurants: [],
                foodItems: [],
                searchedRestaurants: [],
                searchedFood: [],
                pickerResult: []
            }, _this.handleRestaurant = function (text) {
                console.log("this.state.restaurants=============", _this.state.restaurants);

                var searchedRestaurants = _this.props.restaurants.filter(function (restaurant) {
                    return restaurant.name.toLowerCase().indexOf(text.toLowerCase()) > -1;
                });

                _this.setState({
                    searchedRestaurants: searchedRestaurants
                });

                _this.setState({
                    restoName: text
                });
            }, _this.handleFood = function (text) {
                var searchedFood = _this.props.foodItems.filter(function (food) {
                    return food.name.toLowerCase().indexOf(text.toLowerCase()) > -1;
                });

                _this.setState({
                    searchedFood: searchedFood
                });

                _this.setState({
                    itemName: text
                });
            }, _this.handleReview = function (text) {
                _this.setState({
                    review: text
                });
            }, _this.handleRating = function (text) {
                _this.setState({
                    rating: text
                });
            }, _this.renderRestaurant = function (restaurant) {
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.listItem,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 100
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.listItemText,
                            onPress: function onPress() {
                                return _this._handlePressRestaurant(restaurant);
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 102
                            }
                        },
                        restaurant.name
                    )
                );
            }, _this.renderFood = function (food) {
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.listItem,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 113
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.listItemText,
                            onPress: function onPress() {
                                return _this._handlePressFood(food);
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 115
                            }
                        },
                        food.name
                    )
                );
            }, _this._handlePressRestaurant = function (restaurant) {
                _this.setState({
                    restoName: restaurant.name
                });

                _this.setState({
                    searchedRestaurants: []
                });

                console.log("in handle press restaurant", _this.state.restoName);
            }, _this._handlePressFood = function (food) {
                _this.setState({
                    itemName: food.name
                });

                _this.setState({
                    searchedFood: []
                });

                console.log("in handle press food item", _this.state.itemName);
            }, _this.addImage = function _callee() {
                var pickerResult;
                return regeneratorRuntime.async(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return regeneratorRuntime.awrap(_expo.ImagePicker.launchImageLibraryAsync({
                                    allowsEditing: true,
                                    aspect: [4, 3]
                                }));

                            case 2:
                                pickerResult = _context.sent;

                                _this.setState({
                                    pickerResult: pickerResult
                                });

                                console.log(pickerResult);

                                if (!pickerResult.cancelled) {
                                    _this.setState({
                                        image: pickerResult.uri
                                    });
                                }

                            case 6:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, null, _this2);
            }, _this._handleImagePicked = function _callee2(pickerResult) {
                var uploadResponse, uploadResult;
                return regeneratorRuntime.async(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                uploadResponse = void 0, uploadResult = void 0;
                                _context2.prev = 1;

                                _this.setState({
                                    uploading: true
                                });

                                if (pickerResult.cancelled) {
                                    _context2.next = 9;
                                    break;
                                }

                                uploadResponse = _this.uploadImageAsync(pickerResult.uri, _this.state.restoName, _this.state.itemName, _this.state.rating, _this.state.review);
                                _context2.next = 7;
                                return regeneratorRuntime.awrap(uploadResponse.json());

                            case 7:
                                uploadResult = _context2.sent;

                                _this.setState({
                                    image: uploadResult.location
                                });

                            case 9:
                                _context2.next = 17;
                                break;

                            case 11:
                                _context2.prev = 11;
                                _context2.t0 = _context2["catch"](1);
                                console.log({
                                    uploadResponse: uploadResponse
                                });
                                console.log({
                                    uploadResult: uploadResult
                                });
                                console.log({
                                    e: _context2.t0
                                });
                                alert('Upload failed, sorry :(');

                            case 17:
                                _context2.prev = 17;

                                _this.setState({
                                    uploading: false
                                });

                                return _context2.finish(17);

                            case 20:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, null, _this2, [[1, 11, 17, 20]]);
            }, _this.addReview = function (restoName, itemName, review, rating) {
                _this.onSubmitReview();
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(AddReview, [{
            key: "componentDidMount",
            value: function componentDidMount() {
                this.props.dispatch((0, _restaurants.fetchRestaurants)());
                this.props.dispatch((0, _foodItems.fetchFoodItems)());
            }
        }, {
            key: "uploadImageAsync",
            value: function uploadImageAsync(uri, restoName, itemName, rating, review) {
                var apiUrl, uriParts, fileType, formData;
                return regeneratorRuntime.async(function uploadImageAsync$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                apiUrl = 'http://192.168.43.101:3000/uploadimage';
                                console.log(restoName, itemName, rating, review);
                                uriParts = uri.split('.');
                                fileType = uriParts[uriParts.length - 1];
                                formData = new FormData();
                                formData.append('photo', {
                                    uri: uri,
                                    name: "photo." + fileType,
                                    type: "image/" + fileType
                                });
                                formData.append('restaurantName', restoName);
                                formData.append('foodItem', itemName);
                                formData.append('rating', rating);
                                formData.append('review', review);
                                console.log("formdata====================================", formData);
                                this.props.dispatch((0, _review.addReview)(formData));
                                consol.log("form data in addreview.js", formData);

                            case 13:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, null, this);
            }
        }, {
            key: "onSubmitReview",
            value: function onSubmitReview() {
                return regeneratorRuntime.async(function onSubmitReview$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                this._handleImagePicked(this.state.pickerResult);

                            case 1:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, null, this);
            }
        }, {
            key: "render",
            value: function render() {
                var _this3 = this;

                var image = this.state.image;
                return _react3.default.createElement(
                    _reactNative.ScrollView,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 224
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.View,
                        {
                            style: {
                                backgroundColor: '#fff',
                                borderRadius: 4,
                                borderWidth: 1,
                                borderColor: '#fff',
                                margin: 10
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 225
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.Text,
                            {
                                style: {
                                    fontFamily: 'open-sans-semibold',
                                    fontSize: 20,
                                    color: '#673ab7'
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 233
                                }
                            },
                            " Add Review "
                        )
                    ),
                    _react3.default.createElement(
                        _reactNative.View,
                        {
                            style: styles.container,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 241
                            }
                        },
                        _react3.default.createElement(_reactNative.TextInput, {
                            style: styles.input,
                            underlineColorAndroid: "transparent",
                            placeholder: "Restaurant Name",
                            placeholderTextColor: "#9a73ef",
                            autoCapitalize: "none",
                            value: this.state.restoName,
                            onChangeText: this.handleRestaurant,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 242
                            }
                        }),
                        this.props.restaurantsLoading ? _react3.default.createElement(
                            _reactNative.Text,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 252
                                }
                            },
                            "Loading..."
                        ) : _react3.default.createElement(_reactNative.ListView, {
                            dataSource: ds.cloneWithRows(this.state.searchedRestaurants),
                            renderRow: this.renderRestaurant,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 254
                            }
                        }),
                        _react3.default.createElement(_reactNative.TextInput, {
                            style: styles.input,
                            underlineColorAndroid: "transparent",
                            placeholder: "Food Name",
                            placeholderTextColor: "#9a73ef",
                            autoCapitalize: "none",
                            value: this.state.itemName,
                            onChangeText: this.handleFood,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 259
                            }
                        }),
                        this.props.foodItemsLoading ? _react3.default.createElement(
                            _reactNative.Text,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 266
                                }
                            },
                            "Loading..."
                        ) : _react3.default.createElement(_reactNative.ListView, {
                            dataSource: ds.cloneWithRows(this.state.searchedFood),
                            renderRow: this.renderFood,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 268
                            }
                        }),
                        _react3.default.createElement(_reactNative.TextInput, {
                            style: styles.input,
                            underlineColorAndroid: "transparent",
                            placeholder: "Review",
                            placeholderTextColor: "#9a73ef",
                            autoCapitalize: "none",
                            onChangeText: this.handleReview,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 272
                            }
                        }),
                        _react3.default.createElement(_reactNative.TextInput, {
                            style: styles.input,
                            underlineColorAndroid: "transparent",
                            placeholder: "Rating",
                            placeholderTextColor: "#9a73ef",
                            autoCapitalize: "none",
                            onChangeText: this.handleRating,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 279
                            }
                        }),
                        _react3.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                style: styles.submitButton,
                                onPress: function onPress() {
                                    return _this3.addImage();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 286
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.submitButtonText,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 291
                                    }
                                },
                                " Add Image "
                            )
                        ),
                        image && _react3.default.createElement(_reactNative.Image, {
                            source: {
                                uri: image
                            },
                            style: {
                                width: 200,
                                height: 200
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 295
                            }
                        }),
                        _react3.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                style: styles.submitButton,
                                onPress: function onPress() {
                                    return _this3.addReview(_this3.state.itemName, _this3.state.review, _this3.state.restoName, _this3.state.rating);
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 296
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.submitButtonText,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 302
                                    }
                                },
                                " Submit "
                            )
                        )
                    )
                );
            }
        }]);

        return AddReview;
    }(_react2.Component));

    var styles = _reactNative.StyleSheet.create({
        container: {
            borderWidth: 1,
            borderRadius: 4,
            borderColor: '#fff',
            backgroundColor: '#fff',
            marginLeft: 10,
            marginRight: 10,
            marginTop: 10
        },
        input: {
            margin: 15,
            height: 40,
            borderColor: '#7a42f4',
            borderWidth: 2,
            paddingLeft: 20
        },
        listItem: {
            paddingLeft: 20
        },
        listItemText: {
            fontFamily: 'open-sans-regular',
            fontSize: 20
        },
        submitButton: {
            backgroundColor: '#7a42f4',
            padding: 10,
            margin: 15,
            height: 40
        },
        submitButtonText: {
            color: 'white'
        }
    });

    var mapStateToProps = function mapStateToProps(state) {
        return {
            restaurants: state.restaurants.restaurants,
            restaurantsLoading: state.restaurants.restaurantsLoading,
            restaurantsError: state.restaurants.restaurantsError,
            foodItems: state.foodItems.foodItems,
            foodItemsLoading: state.foodItems.foodItemsLoading,
            foodItemsError: state.foodItems.foodItemsError,
            review: state.review.review,
            reviewLoading: state.review.reviewLoading,
            reviewError: state.review.reviewError
        };
    };

    exports.default = (0, _reactRedux.connect)(mapStateToProps)(AddReview);
});